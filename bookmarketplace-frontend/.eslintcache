[{"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\index.js":"1","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\App.js":"2","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPassword.js":"3","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignUp.js":"4","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignIn.js":"5","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPasswordConfirm.js":"6","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Activate.js":"7","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\CreateListings.js":"8","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\MyListings.js":"9","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\DetailedListings.js":"10","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\hocs\\Layout.js":"11","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Home.js":"12","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Nav\\NavBM.js":"13","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Listings\\Listings.js":"14","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Filter\\Filter.js":"15","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\store.js":"16","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\auth.js":"17","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\types.js":"18","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\listings.js":"19","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\constants\\environment.js":"20","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\api.js":"21","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\listings\\listingsSlice.js":"22"},{"size":331,"mtime":1616429018671,"results":"23","hashOfConfig":"24"},{"size":1708,"mtime":1637275261064,"results":"25","hashOfConfig":"24"},{"size":3899,"mtime":1637271713476,"results":"26","hashOfConfig":"24"},{"size":10420,"mtime":1637271710853,"results":"27","hashOfConfig":"24"},{"size":5562,"mtime":1637271698096,"results":"28","hashOfConfig":"24"},{"size":6642,"mtime":1637271786145,"results":"29","hashOfConfig":"24"},{"size":1139,"mtime":1637001714053,"results":"30","hashOfConfig":"24"},{"size":9318,"mtime":1634379364413,"results":"31","hashOfConfig":"24"},{"size":3836,"mtime":1635197881458,"results":"32","hashOfConfig":"24"},{"size":6353,"mtime":1638136499216,"results":"33","hashOfConfig":"24"},{"size":372,"mtime":1637001680034,"results":"34","hashOfConfig":"24"},{"size":1486,"mtime":1638136499225,"results":"35","hashOfConfig":"24"},{"size":2410,"mtime":1637001678930,"results":"36","hashOfConfig":"24"},{"size":2029,"mtime":1637275095344,"results":"37","hashOfConfig":"24"},{"size":3707,"mtime":1616429018660,"results":"38","hashOfConfig":"24"},{"size":421,"mtime":1638136499213,"results":"39","hashOfConfig":"24"},{"size":5218,"mtime":1636410455113,"results":"40","hashOfConfig":"24"},{"size":1053,"mtime":1635197120095,"results":"41","hashOfConfig":"24"},{"size":957,"mtime":1635199541514,"results":"42","hashOfConfig":"24"},{"size":107,"mtime":1637004283656,"results":"43","hashOfConfig":"24"},{"size":621,"mtime":1638136499211,"results":"44","hashOfConfig":"24"},{"size":429,"mtime":1638136499266,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"m0s6as",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\index.js",[],["100","101"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\App.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPassword.js",["102","103","104"],"\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { reset_password } from '../redux/actions/auth';\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Text,\r\n    useToast\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst ResetPassword = (props) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n\r\n    const toast = useToast();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: ''\r\n    });\r\n\r\n    const { email } = formData;\r\n\r\n    const onChange = e => {\r\n        setFormData({ ...formData, [e.target.id]: e.target.value });\r\n        console.log(e.target.id);\r\n        console.log(e.target.value);\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        // props.reset_password(email);\r\n\r\n        toast({\r\n            title: \"Kerkesa u dergua.\",\r\n            description: \"Kontrolloni emailin per instruksionet se si te riktheni fjalkalimin tuaj.\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n        });\r\n\r\n        console.log(\"Request sent\");\r\n\r\n        setTimeout(() => {\r\n            setRequestSent(true);\r\n        }, 5000);\r\n        \r\n    };\r\n\r\n    if (requestSent){\r\n        return navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n        <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n        </Flex>\r\n        <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n            <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                <Box \r\n                    borderWidth={1}\r\n                    px={4}\r\n                    width='full'\r\n                    maxWidth='500px'\r\n                    borderRadius={4}\r\n                    textAlign='center'\r\n                    boxShadow='md'\r\n                    bg=\"white\"\r\n                >\r\n                    <Box p={4}>\r\n                        <form method=\"POST\" onSubmit={e => onSubmit(e)}>\r\n                            <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                <FormControl isRequired>\r\n                                    <Heading mb={8} fontSize={40} fontWeight=\"500\">Rikthe Fjalkalimin</Heading>\r\n                                    <FormLabel>Email</FormLabel>\r\n                                    <Input isRequired \r\n                                    onChange={e => onChange(e)}\r\n                                    id='email' \r\n                                    type='email' \r\n                                    placeholder='Vendosni adresen tuaj te emailit'/>\r\n                                </FormControl>\r\n\r\n                                <Button type='submit' mt={8} colorScheme=\"blue\" variant=\"solid\" width='full'>Rikthe Fjalkalimin</Button>\r\n                                <Flex align=\"center\">\r\n                                    <Divider my={8}/>\r\n                                    <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                    <Divider my={8}/>\r\n                                </Flex>\r\n                                <Link to=\"/signin\">\r\n                                    <Button colorScheme=\"blue\" variant=\"outline\" width='full'>Identifikohu</Button>\r\n                                </Link>\r\n                            </Flex>\r\n                        </form>\r\n                    </Box>\r\n                </Box>\r\n            </Flex>\r\n        </Flex>\r\n    </Grid>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignUp.js",["105","106"],"import React, { useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../redux/actions/auth';\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    useDisclosure,\r\n    Text,\r\n    FormErrorMessage\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst SignUp = ({ signup, isAuthenticated }) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    if (isAuthenticated)\r\n        return navigate('/');\r\n    if (accountCreated)\r\n        return navigate('/signin');\r\n\r\n    return (\r\n        <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n            <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n                <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n            </Flex>\r\n            <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n                <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                    <Box \r\n                        borderWidth={1}\r\n                        px={4}\r\n                        width='full'\r\n                        maxWidth='500px'\r\n                        borderRadius={4}\r\n                        textAlign='center'\r\n                        boxShadow='md'\r\n                        bg=\"white\"\r\n                    >\r\n                        <Box p={4}>\r\n                        <Formik \r\n                            initialValues={{ name: '', email: '', password: '', re_password: '' }}\r\n                            onSubmit={e => {\r\n                                const { name, email, password, re_password } = e;\r\n                                signup({ name, email, password, re_password });\r\n                                setAccountCreated(true);\r\n                            }}\r\n                            validate={values => {\r\n                                const errors = {};\r\n\r\n                                if (values.password !== values.re_password){\r\n                                    errors.re_password = 'Fjalkalimet nuk jan te njejta.'\r\n                                }\r\n\r\n                                if(values.password.length < 8){\r\n                                    errors.password = 'Fjalkalimi duhet te ket te pakten 10 karaktere.'\r\n                                }\r\n\r\n                                return errors;\r\n                            }}\r\n                            >\r\n                            {() => (\r\n                                <Form method=\"POST\">\r\n                                    <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                        <Heading mb={8} fontSize={40} fontWeight=\"500\">Regjistrohu</Heading>\r\n                                        <Field name=\"name\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl isRequired>\r\n                                                    <FormLabel>Emri</FormLabel>\r\n                                                    <Input {...field} id=\"name\" type='text' placeholder='Vendosni usernamin tuaj'/>\r\n                                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n                                        \r\n                                        <Field name=\"email\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isRequired>\r\n                                                    <FormLabel>Email</FormLabel>\r\n                                                    <Input {...field} id=\"email\" type='email' placeholder='Vendosni adresen tuaj te emailit'/>\r\n                                                    <FormErrorMessage>{form.errors.email}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Field name=\"password\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isInvalid={form.errors.password && form.touched.password} isRequired>\r\n                                                    <FormLabel>Fjalkalimi</FormLabel>\r\n                                                    <Input {...field} id=\"password\" type='password' placeholder='Vendosni fjalkalimin tuaj' />\r\n                                                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Field name=\"re_password\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isInvalid={form.errors.re_password && form.touched.re_password} isRequired>\r\n                                                    <FormLabel>Konfirmoni fjalkalimin</FormLabel>\r\n                                                    <Input {...field} id=\"re_password\" type='password' placeholder='Konfirmoni fjalkalimin tuaj' />\r\n                                                    <FormErrorMessage>{form.errors.re_password}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Button onClick={onOpen} my={6} colorScheme=\"blue\" variant=\"link\" w=\"inherit\">\r\n                                            <Text fontSize={14} isTruncated w=\"500px\">Duke u regjistruar ju pranoni Kushtet e Shërbimit, Politikat e Privatësisë dhe Politikat e Përdorimit.</Text>\r\n                                        </Button>\r\n            \r\n                                        <Modal isOpen={isOpen} onClose={onClose} scrollBehavior={'inside'}>\r\n                                            <ModalOverlay />\r\n                                            <ModalContent>\r\n                                            <ModalHeader>Modal Title</ModalHeader>\r\n                                            <ModalCloseButton />\r\n                                            <ModalBody>\r\n                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque sollicitudin velit eget leo malesuada, eu tempor mi rutrum. Ut a ante in mi venenatis convallis a auctor turpis. Donec sed imperdiet ligula. Aenean hendrerit orci quis egestas sagittis. Nam pulvinar felis lacus, lobortis bibendum augue interdum a. Mauris mollis, purus sed euismod tincidunt, urna mi efficitur quam, eget ultricies enim lectus sed massa. Sed urna nulla, bibendum quis metus eu, auctor auctor nibh. Sed id feugiat ante. Aenean ultricies lorem enim, sagittis pellentesque lectus cursus vitae. Etiam vel diam purus. Maecenas aliquet non nisl non feugiat. Etiam ornare eget arcu ac eleifend. Vestibulum a ipsum eu quam iaculis feugiat sagittis non neque.\r\n                                                Quisque ut posuere nulla, non pretium nunc. Ut imperdiet a felis sed viverra. Phasellus nec neque sed risus rhoncus varius sit amet at lectus. Nam non pretium lacus, id consequat nisi. Quisque imperdiet, lorem sit amet iaculis pulvinar, libero lectus placerat ligula, in tempus justo sem vitae nisi. Quisque suscipit nisi ante, ac pharetra nunc condimentum ac. Donec sit amet orci sit amet metus ullamcorper vulputate eget a magna. Proin sodales pellentesque mauris, eget malesuada tortor accumsan ac. Praesent consequat magna id neque mollis, in tempor tellus mollis. Donec at rutrum velit, vel porta justo. Praesent est sem, fringilla eget dolor ac, condimentum egestas tellus. Cras et malesuada enim. Curabitur finibus feugiat quam, vitae interdum nulla hendrerit vel. Morbi et convallis elit.\r\n                                            </ModalBody>\r\n                                    \r\n                                            <ModalFooter>\r\n                                                <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                                                Close\r\n                                                </Button>\r\n                                            </ModalFooter>\r\n                                            </ModalContent>\r\n                                        </Modal>\r\n\r\n                                        <Button type='submit' colorScheme=\"blue\" variant=\"solid\" width='full' >Regjistrohu</Button>\r\n                                        <Flex align=\"center\">\r\n                                            <Divider my={8}/>\r\n                                            <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                            <Divider my={8}/>\r\n                                        </Flex>\r\n                                        <Link to=\"/signin\">\r\n                                            <Button colorScheme=\"blue\" variant=\"outline\" width='full' >Identifikohu</Button>\r\n                                        </Link>\r\n                                    </Flex>\r\n                                    {/* <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre> */}\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                        </Box>\r\n                    </Box>\r\n                </Flex>\r\n            </Flex>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignIn.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPasswordConfirm.js",["107","108","109","110","111","112"],"import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { reset_password_confirm } from '../redux/actions/auth';\r\n\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Text,\r\n    FormErrorMessage\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst ResetPasswordConfirm = (props) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    if (requestSent)\r\n        return navigate('/');\r\n    return (\r\n                <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n                <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n                    <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n                </Flex>\r\n                <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n                    <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                        <Box \r\n                            borderWidth={1}\r\n                            px={4}\r\n                            width='full'\r\n                            maxWidth='500px'\r\n                            borderRadius={4}\r\n                            textAlign='center'\r\n                            boxShadow='md'\r\n                            bg=\"white\"\r\n                        >\r\n                            <Box p={4}>\r\n                                <Formik \r\n                                    initialValues={{ new_password: '', re_new_password: '' }}\r\n                                    onSubmit={e => {console.log(e); \r\n                                        const { new_password, re_new_password } = e;\r\n\r\n                                        const uid = props.match.params.uid;\r\n                                        const token = props.match.params.token;\r\n\r\n                                        // props.reset_password_confirm(uid, token, new_password, re_new_password);\r\n                                        setTimeout(() => {\r\n                                            setRequestSent(true);\r\n                                        }, 5000);\r\n                                    }}\r\n                                    validate={values => {\r\n                                        const errors = {};\r\n\r\n                                        if(values.new_password.length < 8){\r\n                                            errors.new_password = 'Fjalkalimi duhet te ket te pakten 10 karaktere.'\r\n                                        }\r\n\r\n                                        if (values.new_password !== values.re_new_password){\r\n                                            errors.re_new_password = 'Fjalkalimet nuk jan te njejta.'\r\n                                        }\r\n\r\n                                        return errors;\r\n                                    }}\r\n                                    >\r\n                                    {() => (\r\n                                        <Form method=\"POST\">\r\n                                            <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                                <Heading mb={8} fontSize={40} fontWeight=\"500\">Rikthe Fjalkalimin</Heading>\r\n\r\n                                                <Field name=\"new_password\">\r\n                                                    {({field, form}) => (\r\n                                                        <FormControl mt={4} isInvalid={form.errors.new_password && form.touched.new_password} isRequired>\r\n                                                            <FormLabel>Fjalkalimi</FormLabel>\r\n                                                            <Input {...field} id=\"new_password\" type='password' placeholder='Vendosni fjalkalimin tuaj' />\r\n                                                            <FormErrorMessage>{form.errors.new_password}</FormErrorMessage>\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                </Field>\r\n\r\n                                                <Field name=\"re_new_password\">\r\n                                                    {({field, form}) => (\r\n                                                        <FormControl mt={4} isInvalid={form.errors.re_new_password && form.touched.re_new_password} isRequired>\r\n                                                            <FormLabel>Konfirmoni fjalkalimin</FormLabel>\r\n                                                            <Input {...field} id=\"re_new_password\" type='password' placeholder='Konfirmoni fjalkalimin tuaj' />\r\n                                                            <FormErrorMessage>{form.errors.re_new_password}</FormErrorMessage>\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                </Field>\r\n\r\n                                                <Button type='submit' mt={8} colorScheme=\"blue\" variant=\"solid\" width='full'>Konfirmoni ndryshimin</Button>\r\n                                                <Flex align=\"center\">\r\n                                                    <Divider my={8}/>\r\n                                                    <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                                    <Divider my={8}/>\r\n                                                </Flex>\r\n                                                <Link to=\"/signin\">\r\n                                                    <Button colorScheme=\"blue\" variant=\"outline\" width='full'>Identifikohu</Button>\r\n                                                </Link>\r\n                                            </Flex>\r\n                                            {/* <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                            <pre>{JSON.stringify(errors, null, 2)}</pre> */}\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                            </Box>\r\n                        </Box>\r\n                    </Flex>\r\n                </Flex>\r\n            </Grid>\r\n    );\r\n};\r\n\r\nexport default ResetPasswordConfirm;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Activate.js",["113","114"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { Heading,\r\n    Flex,\r\n    Button\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nconst Activate = ({ verify, match }) => {\r\n\r\n    const uid = match.params.uid;\r\n    const token = match.params.token;\r\n\r\n    // verify(uid, token);\r\n\r\n    return (\r\n        <Flex h=\"calc(100vh - 80px)\" w=\"100%\" align=\"center\" justify=\"center\">\r\n            <Flex align=\"center\" \r\n            borderWidth=\"1px\" \r\n            borderRadius=\"lg\" \r\n            w=\"400px\" \r\n            h=\"600px\" \r\n            bg=\"white\"\r\n            justify=\"space-around\"\r\n            direction=\"column\">\r\n                <CheckCircleIcon  color=\"green.500\" boxSize={44} zIndex=\"9999\"/>\r\n                <Heading w=\"350px\" textAlign=\"center\" color='gray.600'>Adresa juaj u verifikua me sukses.</Heading>\r\n                <Link to=\"/signin\">\r\n                    <Button type='submit' colorScheme=\"blue\" variant=\"solid\" width={44} >Identifikohu</Button>\r\n                </Link>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default Activate;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\CreateListings.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React from 'react'\r\nimport { Flex, \r\n    Image,\r\n    Button,\r\n    Box,\r\n    Text,\r\n    useColorModeValue,\r\n    SimpleGrid,\r\n    GridItem,\r\n    chakra,\r\n    Stack,\r\n    FormControl,\r\n    FormLabel,\r\n    InputGroup,\r\n    InputLeftAddon,\r\n    InputRightAddon,\r\n    Input,\r\n    Textarea,\r\n    FormHelperText,\r\n    Icon,\r\n    VisuallyHidden,\r\n    Heading,\r\n    FormErrorMessage,\r\n    Link,\r\n    Divider,\r\n    Checkbox\r\n} from \"@chakra-ui/react\";\r\n\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nconst CreateListings = () => {\r\n\r\n    const signin = (email, password) => {\r\n        console.log(email, password)\r\n    }\r\n\r\n    return (\r\n        <Box bg=\"#F7FAFC\">\r\n            <Flex m=\"auto\" flexDir=\"column\" pt=\"50px\" w=\"700px\">\r\n                <Text alignSelf=\"flex-start\" fontWeight=\"semibold\" fontSize=\"2xl\" marginTop={4}>Krijo nje njoftim</Text>\r\n                    <Formik \r\n                    initialValues={{ photo:'', title: '', description: '', price: '', phoneNumber: '', whatsapp: '', viber: '', instaUsername: '' }}\r\n                    onSubmit={e => {\r\n                        console.log(e);\r\n                    }}\r\n                    // validate={values => {\r\n                    //     const errors = {};\r\n\r\n                    //     return errors;\r\n                    // }}\r\n                    >\r\n                        <Form method=\"POST\">\r\n                        <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            \r\n                                    \r\n                                                    <FormControl mt={4} >\r\n                                                        <FormLabel>Vendos Fotot</FormLabel>\r\n                                                        <input id=\"photo\" type='file' />\r\n                                                        <FormHelperText>Deri ne 5 foto*</FormHelperText>\r\n                                                    </FormControl>\r\n                                       \r\n                                        </Flex>\r\n                                    </Flex>\r\n\r\n\r\n                                    <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            <Field name=\"title\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.title && form.touched.title} isRequired>\r\n                                                        <FormLabel>Titulli</FormLabel>\r\n                                                        <Input {...field} id=\"title\" type='text' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <Field name=\"description\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.description && form.touched.description} isRequired>\r\n                                                        <FormLabel>Pershkrimi</FormLabel>\r\n                                                        <Input {...field} id=\"description\" as='textarea' h=\"100px\" placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <Field name=\"price\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.price && form.touched.price} isRequired>\r\n                                                        <FormLabel>Cmimi</FormLabel>\r\n                                                        <InputGroup>\r\n                                                            <Input {...field} id=\"price\" type='number' placeholder='' />\r\n                                                            <InputRightAddon children=\"ALL\" />\r\n                                                        </InputGroup>\r\n                                                        <FormErrorMessage>{form.errors.price}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n                                        </Flex>\r\n                                    </Flex>\r\n\r\n\r\n                                    <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            <Field name=\"phoneNumber\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.phoneNumber && form.touched.phoneNumber} isRequired>\r\n                                                        <FormLabel>Numri i telefonit</FormLabel>\r\n                                                        <Input {...field} id=\"phoneNumber\" type='text' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.phoneNumber}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <FormControl  mt={4}>\r\n                                                <Flex justify=\"space-between\">\r\n                                                    <FormLabel>Whatsapp</FormLabel>\r\n                                                    <Checkbox id=\"whatsapp\" name=\"whatsapp\" value=\"whatsapp\"></Checkbox>\r\n                                                </Flex>\r\n                                            </FormControl>\r\n\r\n                                            <FormControl  mt={4}>\r\n                                                <Flex justify=\"space-between\">\r\n                                                    <FormLabel>Viber</FormLabel>\r\n                                                    <Checkbox id=\"viber\" name=\"viber\" value=\"viber\"></Checkbox>\r\n                                                </Flex>\r\n                                            </FormControl>\r\n\r\n                                            <Field name=\"instaUsername\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.instaUsername && form.touched.instaUsername} isRequired>\r\n                                                        <FormLabel>Instagram Username</FormLabel>\r\n                                                        <Input {...field} id=\"instaUsername\" type='number' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.instaUsername}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n                                        </Flex>\r\n                                    </Flex>\r\n                            {/* </Flex> */}\r\n                                <Button mt={4} mb={100} type='submit' colorScheme=\"blue\" variant=\"solid\" width='full' >Krijo</Button>\r\n                        </Form>\r\n                    </Formik>\r\n            </Flex>\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CreateListings\r\n\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\MyListings.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\DetailedListings.js",["129","130"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\hocs\\Layout.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Home.js",["131","132","133"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Nav\\NavBM.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Listings\\Listings.js",["134","135"],"import React from 'react';\r\nimport { Box,\r\n    Select,\r\n    Flex,\r\n    Text,\r\n    Image\r\n} from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport libri from '../../assets/libri1.jpg';\r\n\r\nconst Listings = ({listings = []}) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [sort, setSort] = React.useState(2);\r\n\r\n    const handleClick = (e) => {\r\n        navigate(`detailedlisting/${e}`);\r\n    }\r\n\r\n    return (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" w=\"full\" flexDir=\"column\">\r\n            <Flex w=\"80%\" justifyContent=\"space-between\" alignItems=\"center\" h={16} borderBottom=\"1px solid #D4D4D4\">\r\n                <Text fontSize=\"2xl\" fontWeight=\"500\">11 Libra</Text>\r\n                <Flex alignItems=\"center\">\r\n                    <Text fontSize=\"lg\" fontWeight=\"400\" color=\"gray.500\" w=\"150px\">\r\n                        Listo sipas:\r\n                    </Text>\r\n                    <Select placeholder=\" \" bg=\"white\">\r\n                        <option value={1} key={1} onChange>Dates: Me te rejat</option>\r\n                        <option value={2} key={2}>Cmimit: Me te lirat</option>\r\n                    </Select>\r\n                </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-around\" wrap=\"wrap\" w=\"90%\">\r\n                {listings.map(e => <Box borderWidth=\"1px\" borderRadius=\"lg\" w=\"300px\" h=\"500px\" bg=\"white\" my=\"5\" key={e.id} onClick={() => handleClick(e.id)}>\r\n                    <Image src={libri} alt={libri} borderTopRadius=\"lg\" cursor=\"pointer\"/>\r\n                    <Box m=\"6\" cursor=\"pointer\">\r\n                        <Box fontWeight=\"semibold\" as=\"h4\" isTruncated>\r\n                            <Text fontSize=\"xl\">{e.title}</Text>\r\n                        </Box>\r\n                        <Box>\r\n                            <Text fontSize=\"xl\">ALL {e.price}</Text>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>)}\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Listings\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Filter\\Filter.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\store.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\auth.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\types.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\listings.js",["136"],"import axios from 'axios';\r\nimport {\r\n    GET_LISTING_LOADING,\r\n    GET_LISTING_SUCCESS,\r\n    GET_LISTING_FAIL\r\n} from './types';\r\n\r\nimport url from '../constants/environment';\r\nimport { useToken } from '../customHooks';\r\n\r\n\r\nlet config = {\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n}\r\n\r\nexport const getListings = () => async dispatch => {\r\n\r\n    let token = useToken();\r\n\r\n    config.headers = {\r\n        ...config.headers, \r\n        'Authorization': `JWT ${token}`\r\n    }\r\n    console.log(config);\r\n\r\n    const body = JSON.stringify({}); \r\n\r\n    dispatch({\r\n        type: GET_LISTING_LOADING,\r\n    });\r\n\r\n    try {\r\n        const res = await axios.get(`${url}/api/book-list/`, config);\r\n\r\n        console.log(\"success\");\r\n\r\n        dispatch({\r\n            type: GET_LISTING_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_LISTING_FAIL\r\n        });\r\n    }\r\n};",["137","138"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\constants\\environment.js",[],["139","140"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\api.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\listings\\listingsSlice.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":17},{"ruleId":"145","severity":1,"message":"149","line":5,"column":10,"nodeType":"147","messageId":"148","endLine":5,"endColumn":24},{"ruleId":"145","severity":1,"message":"150","line":33,"column":13,"nodeType":"147","messageId":"148","endLine":33,"endColumn":18},{"ruleId":"145","severity":1,"message":"146","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":17},{"ruleId":"145","severity":1,"message":"151","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":17},{"ruleId":"145","severity":1,"message":"152","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":32},{"ruleId":"145","severity":1,"message":"153","line":55,"column":49,"nodeType":"147","messageId":"148","endLine":55,"endColumn":61},{"ruleId":"145","severity":1,"message":"154","line":55,"column":63,"nodeType":"147","messageId":"148","endLine":55,"endColumn":78},{"ruleId":"145","severity":1,"message":"155","line":57,"column":47,"nodeType":"147","messageId":"148","endLine":57,"endColumn":50},{"ruleId":"145","severity":1,"message":"156","line":58,"column":47,"nodeType":"147","messageId":"148","endLine":58,"endColumn":52},{"ruleId":"145","severity":1,"message":"155","line":15,"column":11,"nodeType":"147","messageId":"148","endLine":15,"endColumn":14},{"ruleId":"145","severity":1,"message":"156","line":16,"column":11,"nodeType":"147","messageId":"148","endLine":16,"endColumn":16},{"ruleId":"145","severity":1,"message":"157","line":3,"column":5,"nodeType":"147","messageId":"148","endLine":3,"endColumn":10},{"ruleId":"145","severity":1,"message":"158","line":7,"column":5,"nodeType":"147","messageId":"148","endLine":7,"endColumn":22},{"ruleId":"145","severity":1,"message":"159","line":8,"column":5,"nodeType":"147","messageId":"148","endLine":8,"endColumn":15},{"ruleId":"145","severity":1,"message":"160","line":9,"column":5,"nodeType":"147","messageId":"148","endLine":9,"endColumn":13},{"ruleId":"145","severity":1,"message":"161","line":10,"column":5,"nodeType":"147","messageId":"148","endLine":10,"endColumn":11},{"ruleId":"145","severity":1,"message":"162","line":11,"column":5,"nodeType":"147","messageId":"148","endLine":11,"endColumn":10},{"ruleId":"145","severity":1,"message":"163","line":15,"column":5,"nodeType":"147","messageId":"148","endLine":15,"endColumn":19},{"ruleId":"145","severity":1,"message":"164","line":18,"column":5,"nodeType":"147","messageId":"148","endLine":18,"endColumn":13},{"ruleId":"145","severity":1,"message":"165","line":20,"column":5,"nodeType":"147","messageId":"148","endLine":20,"endColumn":9},{"ruleId":"145","severity":1,"message":"166","line":21,"column":5,"nodeType":"147","messageId":"148","endLine":21,"endColumn":19},{"ruleId":"145","severity":1,"message":"167","line":22,"column":5,"nodeType":"147","messageId":"148","endLine":22,"endColumn":12},{"ruleId":"145","severity":1,"message":"168","line":24,"column":5,"nodeType":"147","messageId":"148","endLine":24,"endColumn":9},{"ruleId":"145","severity":1,"message":"169","line":25,"column":5,"nodeType":"147","messageId":"148","endLine":25,"endColumn":12},{"ruleId":"145","severity":1,"message":"170","line":37,"column":11,"nodeType":"147","messageId":"148","endLine":37,"endColumn":17},{"ruleId":"145","severity":1,"message":"171","line":17,"column":18,"nodeType":"147","messageId":"148","endLine":17,"endColumn":23},{"ruleId":"145","severity":1,"message":"172","line":21,"column":11,"nodeType":"147","messageId":"148","endLine":21,"endColumn":17},{"ruleId":"145","severity":1,"message":"173","line":6,"column":23,"nodeType":"147","messageId":"148","endLine":6,"endColumn":34},{"ruleId":"145","severity":1,"message":"171","line":12,"column":18,"nodeType":"147","messageId":"148","endLine":12,"endColumn":23},{"ruleId":"174","severity":1,"message":"175","line":17,"column":9,"nodeType":"176","endLine":17,"endColumn":15,"suggestions":"177"},{"ruleId":"145","severity":1,"message":"178","line":16,"column":12,"nodeType":"147","messageId":"148","endLine":16,"endColumn":16},{"ruleId":"145","severity":1,"message":"179","line":16,"column":18,"nodeType":"147","messageId":"148","endLine":16,"endColumn":25},{"ruleId":"145","severity":1,"message":"180","line":28,"column":11,"nodeType":"147","messageId":"148","endLine":28,"endColumn":15},{"ruleId":"141","replacedBy":"181"},{"ruleId":"143","replacedBy":"182"},{"ruleId":"141","replacedBy":"183"},{"ruleId":"143","replacedBy":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'reset_password' is defined but never used.","'email' is assigned a value but never used.","'signup' is defined but never used.","'reset_password_confirm' is defined but never used.","'new_password' is assigned a value but never used.","'re_new_password' is assigned a value but never used.","'uid' is assigned a value but never used.","'token' is assigned a value but never used.","'Image' is defined but never used.","'useColorModeValue' is defined but never used.","'SimpleGrid' is defined but never used.","'GridItem' is defined but never used.","'chakra' is defined but never used.","'Stack' is defined but never used.","'InputLeftAddon' is defined but never used.","'Textarea' is defined but never used.","'Icon' is defined but never used.","'VisuallyHidden' is defined but never used.","'Heading' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'signin' is assigned a value but never used.","'error' is assigned a value but never used.","'librat' is assigned a value but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["187"],"'sort' is assigned a value but never used.","'setSort' is assigned a value but never used.","'body' is assigned a value but never used.",["185"],["186"],["185"],["186"],"no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},"Update the dependencies array to be: [data, dispatch]",{"range":"190","text":"191"},[616,622],"[data, dispatch]"]