[{"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\index.js":"1","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\App.js":"2","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPassword.js":"3","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignUp.js":"4","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignIn.js":"5","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPasswordConfirm.js":"6","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Activate.js":"7","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\CreateListings.js":"8","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\MyListings.js":"9","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\DetailedListings.js":"10","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\hocs\\Layout.js":"11","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Home.js":"12","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Nav\\NavBM.js":"13","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Listings\\Listings.js":"14","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Filter\\Filter.js":"15","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\store.js":"16","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\auth.js":"17","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\types.js":"18","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\listings.js":"19","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\constants\\environment.js":"20","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\api.js":"21","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\listings.js":"22","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\listingsSlice.js":"23","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\authSlice.js":"24"},{"size":331,"mtime":1616429018671,"results":"25","hashOfConfig":"26"},{"size":1708,"mtime":1637275261064,"results":"27","hashOfConfig":"26"},{"size":3899,"mtime":1637271713476,"results":"28","hashOfConfig":"26"},{"size":10420,"mtime":1637271710853,"results":"29","hashOfConfig":"26"},{"size":5562,"mtime":1637271698096,"results":"30","hashOfConfig":"26"},{"size":6642,"mtime":1637271786145,"results":"31","hashOfConfig":"26"},{"size":1139,"mtime":1637001714053,"results":"32","hashOfConfig":"26"},{"size":9318,"mtime":1634379364413,"results":"33","hashOfConfig":"26"},{"size":3836,"mtime":1635197881458,"results":"34","hashOfConfig":"26"},{"size":6358,"mtime":1638023498306,"results":"35","hashOfConfig":"26"},{"size":372,"mtime":1637001680034,"results":"36","hashOfConfig":"26"},{"size":1491,"mtime":1638057506798,"results":"37","hashOfConfig":"26"},{"size":2410,"mtime":1637001678930,"results":"38","hashOfConfig":"26"},{"size":2029,"mtime":1637275095344,"results":"39","hashOfConfig":"26"},{"size":3707,"mtime":1616429018660,"results":"40","hashOfConfig":"26"},{"size":487,"mtime":1638058177884,"results":"41","hashOfConfig":"26"},{"size":5218,"mtime":1636410455113,"results":"42","hashOfConfig":"26"},{"size":1053,"mtime":1635197120095,"results":"43","hashOfConfig":"26"},{"size":957,"mtime":1635199541514,"results":"44","hashOfConfig":"26"},{"size":107,"mtime":1637004283656,"results":"45","hashOfConfig":"26"},{"size":257,"mtime":1638023400984,"results":"46","hashOfConfig":"26"},{"size":582,"mtime":1638023160641,"results":"47","hashOfConfig":"26"},{"size":429,"mtime":1638057362892,"results":"48","hashOfConfig":"26"},{"size":582,"mtime":1638057752317,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"m0s6as",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\index.js",[],["110","111"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\App.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPassword.js",["112","113","114"],"\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { reset_password } from '../redux/actions/auth';\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Text,\r\n    useToast\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst ResetPassword = (props) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n\r\n    const toast = useToast();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: ''\r\n    });\r\n\r\n    const { email } = formData;\r\n\r\n    const onChange = e => {\r\n        setFormData({ ...formData, [e.target.id]: e.target.value });\r\n        console.log(e.target.id);\r\n        console.log(e.target.value);\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        // props.reset_password(email);\r\n\r\n        toast({\r\n            title: \"Kerkesa u dergua.\",\r\n            description: \"Kontrolloni emailin per instruksionet se si te riktheni fjalkalimin tuaj.\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n        });\r\n\r\n        console.log(\"Request sent\");\r\n\r\n        setTimeout(() => {\r\n            setRequestSent(true);\r\n        }, 5000);\r\n        \r\n    };\r\n\r\n    if (requestSent){\r\n        return navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n        <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n        </Flex>\r\n        <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n            <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                <Box \r\n                    borderWidth={1}\r\n                    px={4}\r\n                    width='full'\r\n                    maxWidth='500px'\r\n                    borderRadius={4}\r\n                    textAlign='center'\r\n                    boxShadow='md'\r\n                    bg=\"white\"\r\n                >\r\n                    <Box p={4}>\r\n                        <form method=\"POST\" onSubmit={e => onSubmit(e)}>\r\n                            <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                <FormControl isRequired>\r\n                                    <Heading mb={8} fontSize={40} fontWeight=\"500\">Rikthe Fjalkalimin</Heading>\r\n                                    <FormLabel>Email</FormLabel>\r\n                                    <Input isRequired \r\n                                    onChange={e => onChange(e)}\r\n                                    id='email' \r\n                                    type='email' \r\n                                    placeholder='Vendosni adresen tuaj te emailit'/>\r\n                                </FormControl>\r\n\r\n                                <Button type='submit' mt={8} colorScheme=\"blue\" variant=\"solid\" width='full'>Rikthe Fjalkalimin</Button>\r\n                                <Flex align=\"center\">\r\n                                    <Divider my={8}/>\r\n                                    <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                    <Divider my={8}/>\r\n                                </Flex>\r\n                                <Link to=\"/signin\">\r\n                                    <Button colorScheme=\"blue\" variant=\"outline\" width='full'>Identifikohu</Button>\r\n                                </Link>\r\n                            </Flex>\r\n                        </form>\r\n                    </Box>\r\n                </Box>\r\n            </Flex>\r\n        </Flex>\r\n    </Grid>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignUp.js",["115","116"],"import React, { useState } from 'react';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../redux/actions/auth';\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    useDisclosure,\r\n    Text,\r\n    FormErrorMessage\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst SignUp = ({ signup, isAuthenticated }) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    if (isAuthenticated)\r\n        return navigate('/');\r\n    if (accountCreated)\r\n        return navigate('/signin');\r\n\r\n    return (\r\n        <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n            <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n                <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n            </Flex>\r\n            <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n                <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                    <Box \r\n                        borderWidth={1}\r\n                        px={4}\r\n                        width='full'\r\n                        maxWidth='500px'\r\n                        borderRadius={4}\r\n                        textAlign='center'\r\n                        boxShadow='md'\r\n                        bg=\"white\"\r\n                    >\r\n                        <Box p={4}>\r\n                        <Formik \r\n                            initialValues={{ name: '', email: '', password: '', re_password: '' }}\r\n                            onSubmit={e => {\r\n                                const { name, email, password, re_password } = e;\r\n                                signup({ name, email, password, re_password });\r\n                                setAccountCreated(true);\r\n                            }}\r\n                            validate={values => {\r\n                                const errors = {};\r\n\r\n                                if (values.password !== values.re_password){\r\n                                    errors.re_password = 'Fjalkalimet nuk jan te njejta.'\r\n                                }\r\n\r\n                                if(values.password.length < 8){\r\n                                    errors.password = 'Fjalkalimi duhet te ket te pakten 10 karaktere.'\r\n                                }\r\n\r\n                                return errors;\r\n                            }}\r\n                            >\r\n                            {() => (\r\n                                <Form method=\"POST\">\r\n                                    <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                        <Heading mb={8} fontSize={40} fontWeight=\"500\">Regjistrohu</Heading>\r\n                                        <Field name=\"name\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl isRequired>\r\n                                                    <FormLabel>Emri</FormLabel>\r\n                                                    <Input {...field} id=\"name\" type='text' placeholder='Vendosni usernamin tuaj'/>\r\n                                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n                                        \r\n                                        <Field name=\"email\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isRequired>\r\n                                                    <FormLabel>Email</FormLabel>\r\n                                                    <Input {...field} id=\"email\" type='email' placeholder='Vendosni adresen tuaj te emailit'/>\r\n                                                    <FormErrorMessage>{form.errors.email}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Field name=\"password\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isInvalid={form.errors.password && form.touched.password} isRequired>\r\n                                                    <FormLabel>Fjalkalimi</FormLabel>\r\n                                                    <Input {...field} id=\"password\" type='password' placeholder='Vendosni fjalkalimin tuaj' />\r\n                                                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Field name=\"re_password\">\r\n                                            {({field, form}) => (\r\n                                                <FormControl mt={4} isInvalid={form.errors.re_password && form.touched.re_password} isRequired>\r\n                                                    <FormLabel>Konfirmoni fjalkalimin</FormLabel>\r\n                                                    <Input {...field} id=\"re_password\" type='password' placeholder='Konfirmoni fjalkalimin tuaj' />\r\n                                                    <FormErrorMessage>{form.errors.re_password}</FormErrorMessage>\r\n                                                </FormControl>\r\n                                            )}\r\n                                        </Field>\r\n\r\n                                        <Button onClick={onOpen} my={6} colorScheme=\"blue\" variant=\"link\" w=\"inherit\">\r\n                                            <Text fontSize={14} isTruncated w=\"500px\">Duke u regjistruar ju pranoni Kushtet e Shërbimit, Politikat e Privatësisë dhe Politikat e Përdorimit.</Text>\r\n                                        </Button>\r\n            \r\n                                        <Modal isOpen={isOpen} onClose={onClose} scrollBehavior={'inside'}>\r\n                                            <ModalOverlay />\r\n                                            <ModalContent>\r\n                                            <ModalHeader>Modal Title</ModalHeader>\r\n                                            <ModalCloseButton />\r\n                                            <ModalBody>\r\n                                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque sollicitudin velit eget leo malesuada, eu tempor mi rutrum. Ut a ante in mi venenatis convallis a auctor turpis. Donec sed imperdiet ligula. Aenean hendrerit orci quis egestas sagittis. Nam pulvinar felis lacus, lobortis bibendum augue interdum a. Mauris mollis, purus sed euismod tincidunt, urna mi efficitur quam, eget ultricies enim lectus sed massa. Sed urna nulla, bibendum quis metus eu, auctor auctor nibh. Sed id feugiat ante. Aenean ultricies lorem enim, sagittis pellentesque lectus cursus vitae. Etiam vel diam purus. Maecenas aliquet non nisl non feugiat. Etiam ornare eget arcu ac eleifend. Vestibulum a ipsum eu quam iaculis feugiat sagittis non neque.\r\n                                                Quisque ut posuere nulla, non pretium nunc. Ut imperdiet a felis sed viverra. Phasellus nec neque sed risus rhoncus varius sit amet at lectus. Nam non pretium lacus, id consequat nisi. Quisque imperdiet, lorem sit amet iaculis pulvinar, libero lectus placerat ligula, in tempus justo sem vitae nisi. Quisque suscipit nisi ante, ac pharetra nunc condimentum ac. Donec sit amet orci sit amet metus ullamcorper vulputate eget a magna. Proin sodales pellentesque mauris, eget malesuada tortor accumsan ac. Praesent consequat magna id neque mollis, in tempor tellus mollis. Donec at rutrum velit, vel porta justo. Praesent est sem, fringilla eget dolor ac, condimentum egestas tellus. Cras et malesuada enim. Curabitur finibus feugiat quam, vitae interdum nulla hendrerit vel. Morbi et convallis elit.\r\n                                            </ModalBody>\r\n                                    \r\n                                            <ModalFooter>\r\n                                                <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                                                Close\r\n                                                </Button>\r\n                                            </ModalFooter>\r\n                                            </ModalContent>\r\n                                        </Modal>\r\n\r\n                                        <Button type='submit' colorScheme=\"blue\" variant=\"solid\" width='full' >Regjistrohu</Button>\r\n                                        <Flex align=\"center\">\r\n                                            <Divider my={8}/>\r\n                                            <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                            <Divider my={8}/>\r\n                                        </Flex>\r\n                                        <Link to=\"/signin\">\r\n                                            <Button colorScheme=\"blue\" variant=\"outline\" width='full' >Identifikohu</Button>\r\n                                        </Link>\r\n                                    </Flex>\r\n                                    {/* <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                    <pre>{JSON.stringify(errors, null, 2)}</pre> */}\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                        </Box>\r\n                    </Box>\r\n                </Flex>\r\n            </Flex>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\SignIn.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\ResetPasswordConfirm.js",["117","118","119","120","121","122"],"import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { reset_password_confirm } from '../redux/actions/auth';\r\n\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nimport { Grid,\r\n    Image,\r\n    Heading,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    FormControl,\r\n    Box,\r\n    FormLabel,\r\n    Divider,\r\n    Text,\r\n    FormErrorMessage\r\n} from \"@chakra-ui/react\";\r\nimport bookIllustation from \"../assets/bookIllustation.svg\";\r\n\r\nconst ResetPasswordConfirm = (props) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    if (requestSent)\r\n        return navigate('/');\r\n    return (\r\n                <Grid templateColumns=\"repeat(7, 1fr)\" h=\"calc(100vh - 80px)\" >\r\n                <Flex gridColumn=\"span 3\" bg=\"#263772\" alignItems=\"center\" justifyContent=\"center\">\r\n                    <Image boxSize=\"450px\" src={bookIllustation} alt=\"bookIllustation\"/>\r\n                </Flex>\r\n                <Flex gridColumn=\"span 4\" bg=\"#F7FAFC\">\r\n                    <Flex minHeight='calc(100vh - 80px)' width='full' align='center' justifyContent='center'>\r\n                        <Box \r\n                            borderWidth={1}\r\n                            px={4}\r\n                            width='full'\r\n                            maxWidth='500px'\r\n                            borderRadius={4}\r\n                            textAlign='center'\r\n                            boxShadow='md'\r\n                            bg=\"white\"\r\n                        >\r\n                            <Box p={4}>\r\n                                <Formik \r\n                                    initialValues={{ new_password: '', re_new_password: '' }}\r\n                                    onSubmit={e => {console.log(e); \r\n                                        const { new_password, re_new_password } = e;\r\n\r\n                                        const uid = props.match.params.uid;\r\n                                        const token = props.match.params.token;\r\n\r\n                                        // props.reset_password_confirm(uid, token, new_password, re_new_password);\r\n                                        setTimeout(() => {\r\n                                            setRequestSent(true);\r\n                                        }, 5000);\r\n                                    }}\r\n                                    validate={values => {\r\n                                        const errors = {};\r\n\r\n                                        if(values.new_password.length < 8){\r\n                                            errors.new_password = 'Fjalkalimi duhet te ket te pakten 10 karaktere.'\r\n                                        }\r\n\r\n                                        if (values.new_password !== values.re_new_password){\r\n                                            errors.re_new_password = 'Fjalkalimet nuk jan te njejta.'\r\n                                        }\r\n\r\n                                        return errors;\r\n                                    }}\r\n                                    >\r\n                                    {() => (\r\n                                        <Form method=\"POST\">\r\n                                            <Flex my={8} textAlign='left' flexDir=\"column\">\r\n                                                <Heading mb={8} fontSize={40} fontWeight=\"500\">Rikthe Fjalkalimin</Heading>\r\n\r\n                                                <Field name=\"new_password\">\r\n                                                    {({field, form}) => (\r\n                                                        <FormControl mt={4} isInvalid={form.errors.new_password && form.touched.new_password} isRequired>\r\n                                                            <FormLabel>Fjalkalimi</FormLabel>\r\n                                                            <Input {...field} id=\"new_password\" type='password' placeholder='Vendosni fjalkalimin tuaj' />\r\n                                                            <FormErrorMessage>{form.errors.new_password}</FormErrorMessage>\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                </Field>\r\n\r\n                                                <Field name=\"re_new_password\">\r\n                                                    {({field, form}) => (\r\n                                                        <FormControl mt={4} isInvalid={form.errors.re_new_password && form.touched.re_new_password} isRequired>\r\n                                                            <FormLabel>Konfirmoni fjalkalimin</FormLabel>\r\n                                                            <Input {...field} id=\"re_new_password\" type='password' placeholder='Konfirmoni fjalkalimin tuaj' />\r\n                                                            <FormErrorMessage>{form.errors.re_new_password}</FormErrorMessage>\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                </Field>\r\n\r\n                                                <Button type='submit' mt={8} colorScheme=\"blue\" variant=\"solid\" width='full'>Konfirmoni ndryshimin</Button>\r\n                                                <Flex align=\"center\">\r\n                                                    <Divider my={8}/>\r\n                                                    <Text fontSize={16} color=\"gray.400\" mx={6}>ose</Text>\r\n                                                    <Divider my={8}/>\r\n                                                </Flex>\r\n                                                <Link to=\"/signin\">\r\n                                                    <Button colorScheme=\"blue\" variant=\"outline\" width='full'>Identifikohu</Button>\r\n                                                </Link>\r\n                                            </Flex>\r\n                                            {/* <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                                            <pre>{JSON.stringify(errors, null, 2)}</pre> */}\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                            </Box>\r\n                        </Box>\r\n                    </Flex>\r\n                </Flex>\r\n            </Grid>\r\n    );\r\n};\r\n\r\nexport default ResetPasswordConfirm;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Activate.js",["123","124"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { Heading,\r\n    Flex,\r\n    Button\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nconst Activate = ({ verify, match }) => {\r\n\r\n    const uid = match.params.uid;\r\n    const token = match.params.token;\r\n\r\n    // verify(uid, token);\r\n\r\n    return (\r\n        <Flex h=\"calc(100vh - 80px)\" w=\"100%\" align=\"center\" justify=\"center\">\r\n            <Flex align=\"center\" \r\n            borderWidth=\"1px\" \r\n            borderRadius=\"lg\" \r\n            w=\"400px\" \r\n            h=\"600px\" \r\n            bg=\"white\"\r\n            justify=\"space-around\"\r\n            direction=\"column\">\r\n                <CheckCircleIcon  color=\"green.500\" boxSize={44} zIndex=\"9999\"/>\r\n                <Heading w=\"350px\" textAlign=\"center\" color='gray.600'>Adresa juaj u verifikua me sukses.</Heading>\r\n                <Link to=\"/signin\">\r\n                    <Button type='submit' colorScheme=\"blue\" variant=\"solid\" width={44} >Identifikohu</Button>\r\n                </Link>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default Activate;\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\CreateListings.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"import React from 'react'\r\nimport { Flex, \r\n    Image,\r\n    Button,\r\n    Box,\r\n    Text,\r\n    useColorModeValue,\r\n    SimpleGrid,\r\n    GridItem,\r\n    chakra,\r\n    Stack,\r\n    FormControl,\r\n    FormLabel,\r\n    InputGroup,\r\n    InputLeftAddon,\r\n    InputRightAddon,\r\n    Input,\r\n    Textarea,\r\n    FormHelperText,\r\n    Icon,\r\n    VisuallyHidden,\r\n    Heading,\r\n    FormErrorMessage,\r\n    Link,\r\n    Divider,\r\n    Checkbox\r\n} from \"@chakra-ui/react\";\r\n\r\nimport {\r\n    Formik,\r\n    Field,\r\n    Form\r\n  } from \"formik\";\r\n\r\nconst CreateListings = () => {\r\n\r\n    const signin = (email, password) => {\r\n        console.log(email, password)\r\n    }\r\n\r\n    return (\r\n        <Box bg=\"#F7FAFC\">\r\n            <Flex m=\"auto\" flexDir=\"column\" pt=\"50px\" w=\"700px\">\r\n                <Text alignSelf=\"flex-start\" fontWeight=\"semibold\" fontSize=\"2xl\" marginTop={4}>Krijo nje njoftim</Text>\r\n                    <Formik \r\n                    initialValues={{ photo:'', title: '', description: '', price: '', phoneNumber: '', whatsapp: '', viber: '', instaUsername: '' }}\r\n                    onSubmit={e => {\r\n                        console.log(e);\r\n                    }}\r\n                    // validate={values => {\r\n                    //     const errors = {};\r\n\r\n                    //     return errors;\r\n                    // }}\r\n                    >\r\n                        <Form method=\"POST\">\r\n                        <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            \r\n                                    \r\n                                                    <FormControl mt={4} >\r\n                                                        <FormLabel>Vendos Fotot</FormLabel>\r\n                                                        <input id=\"photo\" type='file' />\r\n                                                        <FormHelperText>Deri ne 5 foto*</FormHelperText>\r\n                                                    </FormControl>\r\n                                       \r\n                                        </Flex>\r\n                                    </Flex>\r\n\r\n\r\n                                    <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            <Field name=\"title\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.title && form.touched.title} isRequired>\r\n                                                        <FormLabel>Titulli</FormLabel>\r\n                                                        <Input {...field} id=\"title\" type='text' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <Field name=\"description\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.description && form.touched.description} isRequired>\r\n                                                        <FormLabel>Pershkrimi</FormLabel>\r\n                                                        <Input {...field} id=\"description\" as='textarea' h=\"100px\" placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <Field name=\"price\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.price && form.touched.price} isRequired>\r\n                                                        <FormLabel>Cmimi</FormLabel>\r\n                                                        <InputGroup>\r\n                                                            <Input {...field} id=\"price\" type='number' placeholder='' />\r\n                                                            <InputRightAddon children=\"ALL\" />\r\n                                                        </InputGroup>\r\n                                                        <FormErrorMessage>{form.errors.price}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n                                        </Flex>\r\n                                    </Flex>\r\n\r\n\r\n                                    <Flex w=\"700px\"\r\n                                        bg=\"white\" \r\n                                        border=\"1px solid #D4D4D4\" \r\n                                        boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                                        borderRadius=\"lg\"\r\n                                        my=\"15px\"\r\n                                    >\r\n                                        <Flex m=\"30px\" align=\"center\" w=\"inherit\" justify=\"space-between\" direction=\"column\">\r\n                                            <Field name=\"phoneNumber\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.phoneNumber && form.touched.phoneNumber} isRequired>\r\n                                                        <FormLabel>Numri i telefonit</FormLabel>\r\n                                                        <Input {...field} id=\"phoneNumber\" type='text' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.phoneNumber}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n\r\n                                            <FormControl  mt={4}>\r\n                                                <Flex justify=\"space-between\">\r\n                                                    <FormLabel>Whatsapp</FormLabel>\r\n                                                    <Checkbox id=\"whatsapp\" name=\"whatsapp\" value=\"whatsapp\"></Checkbox>\r\n                                                </Flex>\r\n                                            </FormControl>\r\n\r\n                                            <FormControl  mt={4}>\r\n                                                <Flex justify=\"space-between\">\r\n                                                    <FormLabel>Viber</FormLabel>\r\n                                                    <Checkbox id=\"viber\" name=\"viber\" value=\"viber\"></Checkbox>\r\n                                                </Flex>\r\n                                            </FormControl>\r\n\r\n                                            <Field name=\"instaUsername\">\r\n                                                {({field, form}) => (\r\n                                                    <FormControl mt={4} isInvalid={form.errors.instaUsername && form.touched.instaUsername} isRequired>\r\n                                                        <FormLabel>Instagram Username</FormLabel>\r\n                                                        <Input {...field} id=\"instaUsername\" type='number' placeholder='' />\r\n                                                        <FormErrorMessage>{form.errors.instaUsername}</FormErrorMessage>\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            </Field>\r\n                                        </Flex>\r\n                                    </Flex>\r\n                            {/* </Flex> */}\r\n                                <Button mt={4} mb={100} type='submit' colorScheme=\"blue\" variant=\"solid\" width='full' >Krijo</Button>\r\n                        </Form>\r\n                    </Formik>\r\n            </Flex>\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CreateListings\r\n\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\MyListings.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\DetailedListings.js",["139","140"],"import React from 'react';\r\nimport { Flex, \r\n    Image,\r\n    Button,\r\n    Box,\r\n    Text\r\n} from \"@chakra-ui/react\";\r\nimport { WarningIcon, QuestionIcon, TriangleDownIcon } from \"@chakra-ui/icons\";\r\nimport { useGetDetailedListingQuery } from '../redux/services/api/listings';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst DetailedListings = () => {\r\n\r\n    let { bookId } = useParams();\r\n    const {data, error, isLoading} = useGetDetailedListingQuery(bookId);\r\n\r\n    const listings = useSelector(state => state.listings.listings);\r\n\r\n    const librat = [1,2,3,4];\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (<div>Loading...</div>) : (\r\n                <Box bg=\"#F7FAFC\">\r\n                        <Flex justify=\"space-evenly\" pt=\"50px\">\r\n                            \r\n                            <Flex flexDir=\"column\" justify=\"space-between\">\r\n                                <Image w=\"600px\" h=\"450px\" border=\"1px solid #D4D4D4\" \r\n                                src=\"gibbresh.png\" \r\n                                fallbackSrc=\"https://via.placeholder.com/600x450\" \r\n                                borderRadius=\"lg\"\r\n                                />\r\n                                <Flex justify=\"space-between\">\r\n                                    <Image border=\"1px solid #D4D4D4\" \r\n                                    src=\"gibbresh.png\" \r\n                                    fallbackSrc=\"https://via.placeholder.com/80x60\" \r\n                                    borderRadius=\"lg\"\r\n                                    />\r\n                                    <Image border=\"1px solid #D4D4D4\" \r\n                                    src=\"gibbresh.png\" \r\n                                    fallbackSrc=\"https://via.placeholder.com/80x60\" \r\n                                    borderRadius=\"lg\"\r\n                                    />\r\n                                    <Image border=\"1px solid #D4D4D4\" \r\n                                    src=\"gibbresh.png\" \r\n                                    fallbackSrc=\"https://via.placeholder.com/80x60\" \r\n                                    borderRadius=\"lg\"\r\n                                    />\r\n                                    <Image border=\"1px solid #D4D4D4\" \r\n                                    src=\"gibbresh.png\" \r\n                                    fallbackSrc=\"https://via.placeholder.com/80x60\" \r\n                                    borderRadius=\"lg\"\r\n                                    />\r\n                                    <Button colorScheme=\"blue\" variant=\"link\">\r\n                                        <Flex flexDir=\"column\" justify=\"space-evenly\" align=\"center\">\r\n                                            <WarningIcon boxSize={6} color=\"blue.600\" />\r\n                                            Raporto njoftimin\r\n                                        </Flex>\r\n                                    </Button>\r\n                                </Flex>\r\n                                \r\n                            </Flex>\r\n\r\n                            <Flex w=\"550px\"\r\n                            h=\"555px\" \r\n                            bg=\"white\" \r\n                            border=\"1px solid #D4D4D4\" \r\n                            boxShadow=\"0px 2px 3px rgba(0, 0, 0, 0.1)\"\r\n                            borderRadius=\"lg\"\r\n                            >\r\n                                <Flex m=\"50px\" flexDir=\"column\" justify=\"space-between\" w=\"full\">\r\n                                    <Text fontSize=\"3xl\">{data.title}</Text>\r\n                                    <Text fontWeight=\"semibold\" fontSize=\"3xl\">{data.price}</Text>\r\n                                    <Text fontSize=\"md\">{data.description}</Text>\r\n                                    <Text alignSelf=\"center\" fontWeight=\"semibold\" fontSize=\"2xl\" marginTop={4}>Emri</Text>\r\n                                    <Text alignSelf=\"center\" fontWeight=\"semibold\" fontSize=\"2xl\">Numri</Text>\r\n                                    <Flex alignSelf=\"center\" marginBottom={4}>\r\n                                        <QuestionIcon mx={4} boxSize={8} color=\"blue.600\" />\r\n                                        <QuestionIcon mx={4} boxSize={8} color=\"blue.600\" />\r\n                                        <QuestionIcon mx={4} boxSize={8} color=\"blue.600\" />\r\n                                    </Flex>\r\n                                    <Flex justifyContent=\"space-between\">\r\n                                        <Text fontSize=\"xl\"><TriangleDownIcon mx={4} boxSize={6} color=\"blue.600\" />Tirana</Text>\r\n                                        <Text fontSize=\"xl\">15:30 28/10/2020</Text>\r\n                                    </Flex>\r\n\r\n                                </Flex>\r\n                            </Flex>\r\n                        </Flex>\r\n\r\n                        <Box my=\"50px\" mx=\"auto\" alignSelf=\"center\" w=\"80%\" borderBottom=\"1px solid #D4D4D4\"></Box>\r\n\r\n                        {listings === null ? <></> : \r\n                            <Flex justifyContent=\"center\" alignItems=\"center\" w=\"full\" flexDir=\"column\">\r\n                                <Flex justifyContent=\"space-around\" wrap=\"wrap\" w=\"90%\">\r\n                                    {listings.slice(0,4).map(e => <Box borderWidth=\"1px\" borderRadius=\"lg\" w=\"300px\" h=\"500px\" bg=\"white\" my=\"5\" key={e}>\r\n                                        <Image src=\"https://via.placeholder.com/300x400\" alt=\"https://via.placeholder.com/300x400\" borderTopRadius=\"lg\" cursor=\"pointer\"/>\r\n                                        <Box m=\"6\" cursor=\"pointer\">\r\n                                            <Box fontWeight=\"semibold\" as=\"h4\" isTruncated>\r\n                                                <Text fontSize=\"xl\" >{e.title}</Text>\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Text fontSize=\"xl\">ALL {e.price}</Text>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Box>)}\r\n                                </Flex>\r\n                            </Flex>\r\n                        }  \r\n                </Box>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailedListings\r\n\r\n\r\n\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\hocs\\Layout.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\screens\\Home.js",["141","142","143","144"],"import React from 'react';\r\nimport Filter from '../components/Filter/Filter';\r\nimport Listings from '../components/Listings/Listings';\r\nimport { Grid, GridItem, Spinner, Flex } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addListings } from '../redux/reducers/listingsSlice';\r\nimport { useGetListingsQuery } from '../redux/services/api/listings';\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const {data, error, isLoading} = useGetListingsQuery(\"listings\");\r\n    const dispatch = useDispatch();\r\n    \r\n    // React.useEffect(() => {\r\n    //     dispatch(addListings(data));\r\n    // } , [data]);\r\n\r\n    return (\r\n        <div>\r\n            <Grid templateColumns=\"repeat(8, 1fr)\" gap={0}>\r\n                <GridItem colSpan={2}>\r\n                    <Filter/>\r\n                </GridItem>\r\n                <GridItem colSpan={6} bg=\"#F7FAFC\">\r\n                    {isLoading ? \r\n                        <Flex align=\"center\" h=\"full\">\r\n                            <Spinner\r\n                                margin=\"auto\"\r\n                                thickness=\"4px\"\r\n                                speed=\"0.65s\"\r\n                                emptyColor=\"gray.200\"\r\n                                color=\"blue.500\"\r\n                                size=\"xl\"\r\n                            />\r\n                        </Flex> : <Listings listings={data}/>}\r\n                </GridItem>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Nav\\NavBM.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Listings\\Listings.js",["145","146"],"import React from 'react';\r\nimport { Box,\r\n    Select,\r\n    Flex,\r\n    Text,\r\n    Image\r\n} from \"@chakra-ui/react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport libri from '../../assets/libri1.jpg';\r\n\r\nconst Listings = ({listings = []}) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [sort, setSort] = React.useState(2);\r\n\r\n    const handleClick = (e) => {\r\n        navigate(`detailedlisting/${e}`);\r\n    }\r\n\r\n    return (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" w=\"full\" flexDir=\"column\">\r\n            <Flex w=\"80%\" justifyContent=\"space-between\" alignItems=\"center\" h={16} borderBottom=\"1px solid #D4D4D4\">\r\n                <Text fontSize=\"2xl\" fontWeight=\"500\">11 Libra</Text>\r\n                <Flex alignItems=\"center\">\r\n                    <Text fontSize=\"lg\" fontWeight=\"400\" color=\"gray.500\" w=\"150px\">\r\n                        Listo sipas:\r\n                    </Text>\r\n                    <Select placeholder=\" \" bg=\"white\">\r\n                        <option value={1} key={1} onChange>Dates: Me te rejat</option>\r\n                        <option value={2} key={2}>Cmimit: Me te lirat</option>\r\n                    </Select>\r\n                </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-around\" wrap=\"wrap\" w=\"90%\">\r\n                {listings.map(e => <Box borderWidth=\"1px\" borderRadius=\"lg\" w=\"300px\" h=\"500px\" bg=\"white\" my=\"5\" key={e.id} onClick={() => handleClick(e.id)}>\r\n                    <Image src={libri} alt={libri} borderTopRadius=\"lg\" cursor=\"pointer\"/>\r\n                    <Box m=\"6\" cursor=\"pointer\">\r\n                        <Box fontWeight=\"semibold\" as=\"h4\" isTruncated>\r\n                            <Text fontSize=\"xl\">{e.title}</Text>\r\n                        </Box>\r\n                        <Box>\r\n                            <Text fontSize=\"xl\">ALL {e.price}</Text>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>)}\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Listings\r\n","C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\components\\Filter\\Filter.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\store.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\auth.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\types.js",[],["147","148"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\actions\\listings.js",["149"],"import axios from 'axios';\r\nimport {\r\n    GET_LISTING_LOADING,\r\n    GET_LISTING_SUCCESS,\r\n    GET_LISTING_FAIL\r\n} from './types';\r\n\r\nimport url from '../constants/environment';\r\nimport { useToken } from '../customHooks';\r\n\r\n\r\nlet config = {\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n}\r\n\r\nexport const getListings = () => async dispatch => {\r\n\r\n    let token = useToken();\r\n\r\n    config.headers = {\r\n        ...config.headers, \r\n        'Authorization': `JWT ${token}`\r\n    }\r\n    console.log(config);\r\n\r\n    const body = JSON.stringify({}); \r\n\r\n    dispatch({\r\n        type: GET_LISTING_LOADING,\r\n    });\r\n\r\n    try {\r\n        const res = await axios.get(`${url}/api/book-list/`, config);\r\n\r\n        console.log(\"success\");\r\n\r\n        dispatch({\r\n            type: GET_LISTING_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_LISTING_FAIL\r\n        });\r\n    }\r\n};",["150","151"],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\constants\\environment.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\api.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\services\\api\\listings.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\listingsSlice.js",[],"C:\\Users\\Fredi\\Desktop\\New\\book-marketplace\\bookmarketplace-frontend\\src\\redux\\reducers\\authSlice.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":17},{"ruleId":"156","severity":1,"message":"160","line":5,"column":10,"nodeType":"158","messageId":"159","endLine":5,"endColumn":24},{"ruleId":"156","severity":1,"message":"161","line":33,"column":13,"nodeType":"158","messageId":"159","endLine":33,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"156","severity":1,"message":"162","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":16},{"ruleId":"156","severity":1,"message":"157","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"156","severity":1,"message":"163","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":32},{"ruleId":"156","severity":1,"message":"164","line":55,"column":49,"nodeType":"158","messageId":"159","endLine":55,"endColumn":61},{"ruleId":"156","severity":1,"message":"165","line":55,"column":63,"nodeType":"158","messageId":"159","endLine":55,"endColumn":78},{"ruleId":"156","severity":1,"message":"166","line":57,"column":47,"nodeType":"158","messageId":"159","endLine":57,"endColumn":50},{"ruleId":"156","severity":1,"message":"167","line":58,"column":47,"nodeType":"158","messageId":"159","endLine":58,"endColumn":52},{"ruleId":"156","severity":1,"message":"166","line":15,"column":11,"nodeType":"158","messageId":"159","endLine":15,"endColumn":14},{"ruleId":"156","severity":1,"message":"167","line":16,"column":11,"nodeType":"158","messageId":"159","endLine":16,"endColumn":16},{"ruleId":"156","severity":1,"message":"168","line":3,"column":5,"nodeType":"158","messageId":"159","endLine":3,"endColumn":10},{"ruleId":"156","severity":1,"message":"169","line":7,"column":5,"nodeType":"158","messageId":"159","endLine":7,"endColumn":22},{"ruleId":"156","severity":1,"message":"170","line":8,"column":5,"nodeType":"158","messageId":"159","endLine":8,"endColumn":15},{"ruleId":"156","severity":1,"message":"171","line":9,"column":5,"nodeType":"158","messageId":"159","endLine":9,"endColumn":13},{"ruleId":"156","severity":1,"message":"172","line":10,"column":5,"nodeType":"158","messageId":"159","endLine":10,"endColumn":11},{"ruleId":"156","severity":1,"message":"173","line":11,"column":5,"nodeType":"158","messageId":"159","endLine":11,"endColumn":10},{"ruleId":"156","severity":1,"message":"174","line":15,"column":5,"nodeType":"158","messageId":"159","endLine":15,"endColumn":19},{"ruleId":"156","severity":1,"message":"175","line":18,"column":5,"nodeType":"158","messageId":"159","endLine":18,"endColumn":13},{"ruleId":"156","severity":1,"message":"176","line":20,"column":5,"nodeType":"158","messageId":"159","endLine":20,"endColumn":9},{"ruleId":"156","severity":1,"message":"177","line":21,"column":5,"nodeType":"158","messageId":"159","endLine":21,"endColumn":19},{"ruleId":"156","severity":1,"message":"178","line":22,"column":5,"nodeType":"158","messageId":"159","endLine":22,"endColumn":12},{"ruleId":"156","severity":1,"message":"179","line":24,"column":5,"nodeType":"158","messageId":"159","endLine":24,"endColumn":9},{"ruleId":"156","severity":1,"message":"180","line":25,"column":5,"nodeType":"158","messageId":"159","endLine":25,"endColumn":12},{"ruleId":"156","severity":1,"message":"181","line":37,"column":11,"nodeType":"158","messageId":"159","endLine":37,"endColumn":17},{"ruleId":"156","severity":1,"message":"182","line":17,"column":18,"nodeType":"158","messageId":"159","endLine":17,"endColumn":23},{"ruleId":"156","severity":1,"message":"183","line":21,"column":11,"nodeType":"158","messageId":"159","endLine":21,"endColumn":17},{"ruleId":"156","severity":1,"message":"184","line":5,"column":23,"nodeType":"158","messageId":"159","endLine":5,"endColumn":34},{"ruleId":"156","severity":1,"message":"185","line":6,"column":10,"nodeType":"158","messageId":"159","endLine":6,"endColumn":21},{"ruleId":"156","severity":1,"message":"182","line":12,"column":18,"nodeType":"158","messageId":"159","endLine":12,"endColumn":23},{"ruleId":"156","severity":1,"message":"186","line":13,"column":11,"nodeType":"158","messageId":"159","endLine":13,"endColumn":19},{"ruleId":"156","severity":1,"message":"187","line":16,"column":12,"nodeType":"158","messageId":"159","endLine":16,"endColumn":16},{"ruleId":"156","severity":1,"message":"188","line":16,"column":18,"nodeType":"158","messageId":"159","endLine":16,"endColumn":25},{"ruleId":"152","replacedBy":"189"},{"ruleId":"154","replacedBy":"190"},{"ruleId":"156","severity":1,"message":"191","line":28,"column":11,"nodeType":"158","messageId":"159","endLine":28,"endColumn":15},{"ruleId":"152","replacedBy":"192"},{"ruleId":"154","replacedBy":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'reset_password' is defined but never used.","'email' is assigned a value but never used.","'signup' is defined but never used.","'reset_password_confirm' is defined but never used.","'new_password' is assigned a value but never used.","'re_new_password' is assigned a value but never used.","'uid' is assigned a value but never used.","'token' is assigned a value but never used.","'Image' is defined but never used.","'useColorModeValue' is defined but never used.","'SimpleGrid' is defined but never used.","'GridItem' is defined but never used.","'chakra' is defined but never used.","'Stack' is defined but never used.","'InputLeftAddon' is defined but never used.","'Textarea' is defined but never used.","'Icon' is defined but never used.","'VisuallyHidden' is defined but never used.","'Heading' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'signin' is assigned a value but never used.","'error' is assigned a value but never used.","'librat' is assigned a value but never used.","'useSelector' is defined but never used.","'addListings' is defined but never used.","'dispatch' is assigned a value but never used.","'sort' is assigned a value but never used.","'setSort' is assigned a value but never used.",["194"],["195"],"'body' is assigned a value but never used.",["194"],["195"],"no-global-assign","no-unsafe-negation"]